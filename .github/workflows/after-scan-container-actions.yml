name: Pull, Scan and Push Docker Image to JFrog

on:
  issues:
    types: [closed]
  workflow_dispatch:
env:
#   IMAGE_NAME: ${{ github.event.issue.title }}
  IMAGE_NAME: python:3.4-alpine
  APPROVED_OR_DENIED: Approved
jobs:
  scan-on-issue:
    runs-on: ubuntu-latest
    environment: request
    permissions:
      issues: write
      contents: write
      repository-projects: write
    outputs:
      IMAGE_DIGEST: ${{ steps.get-image-digest.outputs.IMAGE_DIGEST }}
      VULNERABILITY_SUMARY: ${{ steps.summarize-vulnerabilities.outputs.VULNERABILITY_SUMMARY }}
      IMAGE_SIGNATURE_STATUS: ${{ steps.summarize-vulnerabilities.outputs.IMAGE_SIGNATURE_STATUS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Pull Docker Image from Public Registry
        id: pull-dct
        run: |
          #Enable docker content trust
          export DOCKER_CONTENT_TRUST=1
          # Pull the image from the public registry (Docker Hub)
          docker pull $IMAGE_NAME
        continue-on-error: true

      - name: Pull without signature verification
        if: steps.pull-dct.outcome == 'failure'
        run: |
          #Disable docker content trust
          export DOCKER_CONTENT_TRUST=0
          # Pull the image from the public registry (Docker Hub)
          docker pull $IMAGE_NAME
          echo $JFROG_IMAGE_NAME
      
      - name: Get image digest
        id: get-image-digest
        run: |
          IMAGE_DIGEST=$(docker inspect --format='{{.RepoDigests}}' $IMAGE_NAME | awk -F'@' '{print $2}' | tr -d '[]')
          echo "::set-output name=IMAGE_DIGEST::$IMAGE_DIGEST"

      - name: Scan Image with Trivy
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          format: 'json'
          output: 'trivy-results.json' 

     
      - name: Summarize Vulnerabilities
        id: summarize-vulnerabilities
        if: steps.trivy-scan.outcome == 'success'
        run: |
          echo "Image name: ${{ steps.get-image-name.outputs.IMAGE_NAME }}" > vulnerability_summary.txt
          python summarize_vulnerabilities.py trivy-results.json >> vulnerability_summary.txt
          if [ "${{ steps.pull-dct.outcome }}" == "success" ]; then
            echo "The image is signed." >> vulnerability_summary.txt
            # set the IMAGE_SIGNATURE_STATUS environment variable to signed
            echo "IMAGE_SIGNATURE_STATUS=signed" >> $GITHUB_ENV
          else
            echo "The image is not signed." >> vulnerability_summary.txt
            # set the IMAGE_SIGNATURE_STATUS environment variable to not signed
            echo "IMAGE_SIGNATURE_STATUS=not signed" >> $GITHUB_ENV
          fi
          echo "VULNERABILITY_SUMMARY<<EOF" >> $GITHUB_ENV
          cat vulnerability_summary.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: test event info
        run: cat "$GITHUB_EVENT_PATH"

      # - uses: trstringer/manual-approval@v1
      #   id: manual-approval
      #   with:
      #     approvers: 4dlt
      #     secret: ${{ github.TOKEN }}
      #     minimum-approvals: 1
      #     issue-body: ${{ env.VULNERABILITY_SUMMARY }}
      #   continue-on-error: true
      
    
#----------------- JFROG UPLOAD JOB -----------------------------
# Job using the 'Prod repo' environment to push the approved images to the company registry

  push-to-jfrog:
    needs: scan-on-issue
    runs-on: ubuntu-latest
    environment: Prod repo
    outputs:
      DATE_AND_TIME_OF_APPROVAL: ${{ steps.set-variables.outputs.DATE_AND_TIME_OF_APPROVAL }} 
      USER_WHO_APPROVED_OR_DENIED: ${{ steps.set-variables.outputs.USER_WHO_APPROVED_OR_DENIED }}
    permissions:
      issues: write
      contents: write
      repository-projects: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: test event info
        run: cat "$GITHUB_EVENT_PATH"
      
      - name: Set JFROG_IMAGE_NAME
        run: echo "JFROG_IMAGE_NAME=$(echo ${{ secrets.JF_URL }} | awk -F 'https://' '{print $2}')/docker/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV

              
#-------------- JFROG UPLOAD IMAGE ------------------
  

      # - name: Setup JFrog CLI
      #   uses: jfrog/setup-jfrog-cli@v3
      #   env:
      #     JF_URL: ${{ secrets.JF_URL }}
      #     JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      # - name: Tag and Push Docker Image to JFrog
      #   run: |
      #     JFROG_IMAGE_NAME=$( echo ${{ secrets.JF_URL }} | awk -F 'https://' '{print $2}')/docker/$IMAGE_NAME
      #     docker tag $IMAGE_NAME $JFROG_IMAGE_NAME
      #     jf docker push $JFROG_IMAGE_NAME --build-name=$IMAGE_NAME --build-number=${{ github.run_number }}



      # - uses: actions/github-script@v6
      #   env:
      #     IMAGE_URL: ${{ secrets.JF_URL }}/docker/${{ env.IMAGE_NAME }}
      #   with:
      #     script: |
      #       const imageUrl = process.env.IMAGE_URL
      #       github.rest.issues.createComment({
      #         issue_number: ${{ github.event.issue.number }},
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: 'ðŸ‘‹ Thanks for submitting the request! The image has been approved and uploaded to the company registry. You can find it in ' + imageUrl
      #       })

 # Logging job dedicated to log all the info about the appoved and denied docker images
 # The job must wait for the scan-on-issue job to finish before it can run
 # Saves a list of all the approved images in a file and contains the following info:
# - Image name
# - Image digest
# - Image scan results
# - Image signature status
# - Approved or denied
# - Date and time of the approval
# - User who approved or denied the image
# All the information will be retrieved from the results of the push-to-jfrog job

  logging:
    needs: push-to-jfrog
    runs-on: ubuntu-latest
    environment: request
    permissions:
      issues: write
      contents: write
      repository-projects: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: test event info
        run: cat "$GITHUB_EVENT_PATH"

      - name: Create log file if it doesn't exist
        run: |
          if [ ! -f approved_and_denied_images.csv ]; then
            touch approved_and_denied_images.csv
            echo "Image name,Image digest,Image scan results,Image signature status,Approved or denied,Date and time of the approval,User who approved or denied the image" >> approved_and_denied_images.csv
          fi

        # Append info into log file getting the info from the outputs of the scan-on-issue job
      - name: Append info to log file
        env:
          IMAGE_DIGEST: ${{ needs.scan-on-issue.outputs.IMAGE_DIGEST }}
          VULNERABILITY_SUMMARY: ${{ needs.scan-on-issue.outputs.VULNERABILITY_SUMMARY }}
          IMAGE_SIGNATURE_STATUS: ${{ needs.scan-on-issue.outputs.IMAGE_SIGNATURE_STATUS }}
          APPROVED_OR_DENIED: ${{ needs.scan-on-issue.outputs.APPROVED_OR_DENIED }}
          DATE_AND_TIME_OF_APPROVAL: ${{ needs.scan-on-issue.outputs.DATE_AND_TIME_OF_APPROVAL }}

        run: |
          echo "${{ env.IMAGE_NAME }},${{ env.IMAGE_DIGEST }},${{ env.VULNERABILITY_SUMMARY }},${{ env.IMAGE_SIGNATURE_STATUS }},${{ env.APPROVED_OR_DENIED }},${{ env.DATE_AND_TIME_OF_APPROVAL }},${{ needs.push-to-jfrog.outputs.USER_WHO_APPROVED_OR_DENIED }}" >> approved_and_denied_images.csv
         
      - name: Commit and Push Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add approved_and_denied_images.csv
          git commit -m "Append new JFrog Docker image info to approved_and_denied_images.csv"
          git push
