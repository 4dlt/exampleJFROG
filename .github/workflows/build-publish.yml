name: Pull, Scan and Push Docker Image to JFrog

on:
  issues:
    types: [opened]
  workflow_dispatch:
env:
  IMAGE_NAME: ${{ github.event.issue.title }}

jobs:
  scan-on-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
      repository-projects: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Pull Docker Image from Public Registry
        id: pull-dct
        run: |
          #Enable docker content trust
          export DOCKER_CONTENT_TRUST=1
          # Pull the image from the public registry (Docker Hub)
          docker pull $IMAGE_NAME
        continue-on-error: true
        
      - name: Pull without signature verification
        if: steps.pull-dct.outcome == 'failure'
        run: |
          #Disable docker content trust
          export DOCKER_CONTENT_TRUST=0
          # Pull the image from the public registry (Docker Hub)
          docker pull $IMAGE_NAME
          
      - name: test
        run: |
          ls
          cat $IMAGE_NAME

      - name: Scan Image with Trivy
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          format: 'json' # Output format for the scan results
          output: 'trivy-results.json' # Name of the output file
      
      - name: test
        run: |
          ls
          cat trivy-results.json 
          
      - name: Summarize Vulnerabilities
        if: steps.trivy-scan.outcome == 'success'
        run: |
          echo "Image name: ${{ steps.get-image-name.outputs.IMAGE_NAME }}" > vulnerability_summary.txt
          python summarize_vulnerabilities.py trivy-results.json >> vulnerability_summary.txt
          if [ "${{ steps.pull-dct.outcome }}" == "success" ]; then
            echo "The image is signed." >> vulnerability_summary.txt
          else
            echo "The image is not signed." >> vulnerability_summary.txt
          fi
          echo "VULNERABILITY_SUMMARY<<EOF" >> $GITHUB_ENV
          cat vulnerability_summary.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV


      - uses: trstringer/manual-approval@v1
        with:
          approvers: 4dlt
          secret: ${{ github.TOKEN }}
          minimum-approvals: 1
          issue-body: ${{ env.VULNERABILITY_SUMMARY }}

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Tag and Push Docker Image to JFrog
        if: steps.trivy-scan.outcome == 'success'
        env:
          PUBLIC_IMAGE_NAME: ${{ steps.get-image-name.outputs.IMAGE_NAME }}
        run: |
          JFROG_IMAGE_NAME= $( echo ${{ secrets.JF_URL }} | awk -F 'https://' '{print $2}')/docker/$IMAGE_NAME
          docker tag $PUBLIC_IMAGE_NAME $JFROG_IMAGE_NAME
          jf docker push $JFROG_IMAGE_NAME --build-name=$PUBLIC_IMAGE_NAME --build-number=${{ github.run_number }}

      - name: Fetch Image Digest
        id: fetch-digest
        env:
          JFROG_IMAGE_NAME: alvarodelatorre.jfrog.io/docker/jfrog-docker-python:${{ github.run_number }}
        run: |
          DIGEST=$(docker inspect --format='{{.RepoDigests}}' $JFROG_IMAGE_NAME | awk -F'@' '{print $2}' | tr -d '[]')
          echo "::set-output name=image_digest::$DIGEST"

      - name: Append Image Info to Text File
        run: |
          echo "${{ env.JFROG_IMAGE_NAME }}@${{ steps.fetch-digest.outputs.image_digest }}" >> uploaded_images.txt

      - name: Commit and Push Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add uploaded_images.txt
          git commit -m "Append new JFrog Docker image info to uploaded_images.txt"
          git push


      - uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ github.event.issue.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ‘‹ Thanks for reporting!'
            })
      

      - name: Add comment to issue
        if: steps.trivy-scan.outcome == 'success'
        run: |
          URL="https://github.com/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
          PAYLOAD=$(echo '{ "body": "Image scan successful. You can pull the Docker image from: alvarodelatorre.jfrog.io/docker/jfrog-docker-python:${{ github.run_number }}" }' | jq -c .)
          curl -sSL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" -X POST -d "$PAYLOAD" "$URL"


