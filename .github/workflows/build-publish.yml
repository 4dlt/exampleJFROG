name: Pull, Scan and Push Docker Image to JFrog

on:
  issues:
    types: [opened]

jobs:
  scan-on-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Image Name
        id: get-image-name
        run: echo "::set-output name=IMAGE_NAME::${{ github.event.issue.title }}"

      - name: Pull Docker Image from Public Registry
        env:
          PUBLIC_IMAGE_NAME: ${{ steps.get-image-name.outputs.IMAGE_NAME }}
        run: |
          # Pull the image from the public registry (Docker Hub)
          docker pull $PUBLIC_IMAGE_NAME

      - name: Scan Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.get-image-name.outputs.IMAGE_NAME }}
          exit-code: '1' # Exit with '1' if vulnerabilities are detected
          severity: 'CRITICAL' # Only fail the job for CRITICAL vulnerabilities

      - name: Tag and Push Docker Image to JFrog
        env:
          PUBLIC_IMAGE_NAME: python:3.4-alpine
          JFROG_IMAGE_NAME: alvarodelatorre.jfrog.io/docker/jfrog-docker-python:${{ github.run_number }}
        run: |
          # Tag the image for JFrog Artifactory
          docker tag $PUBLIC_IMAGE_NAME $JFROG_IMAGE_NAME
          # Push the image to JFrog Artifactory using JFrog CLI
          jf docker push $JFROG_IMAGE_NAME

      - name: Publish Build info With JFrog CLI
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: jfrog-docker-pull-push-example
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Export the build name and build number
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish
