name: Pull, Scan and Push Docker Image to JFrog

on:
  issues:
    types: [opened]
  workflow_dispatch:

jobs:
  scan-on-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Image Name
        id: get-image-name
        run: echo "::set-output name=IMAGE_NAME::${{ github.event.issue.title }}"

      - name: Pull Docker Image from Public Registry
        id: pull-dct
        env:
          PUBLIC_IMAGE_NAME: ${{ steps.get-image-name.outputs.IMAGE_NAME }}
        run: |
          #Enable docker content trust
          export DOCKER_CONTENT_TRUST=1
          # Pull the image from the public registry (Docker Hub)
          docker pull $PUBLIC_IMAGE_NAME
        continue-on-error: true
        
      - name: Pull without signature verification
        if: steps.trivy-scan.outcome == 'failure'
        env:
          PUBLIC_IMAGE_NAME: ${{ steps.get-image-name.outputs.IMAGE_NAME }}
        run: |
          #Disable docker content trust
          export DOCKER_CONTENT_TRUST=0
          # Pull the image from the public registry (Docker Hub)
          docker pull $PUBLIC_IMAGE_NAME

      - name: Scan Image with Trivy
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.get-image-name.outputs.IMAGE_NAME }}
          exit-code: '1'
          severity: 'CRITICAL'
        
      - uses: trstringer/manual-approval@v1
        with:
          approvers: 4dlt
          secret: ${{ github.TOKEN }}
          minimum-approvals: 1

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Tag and Push Docker Image to JFrog
        if: steps.trivy-scan.outcome == 'success'
        env:
          PUBLIC_IMAGE_NAME: ${{ steps.get-image-name.outputs.IMAGE_NAME }}
        run: |
          TRANSFORMED_IMAGE_NAME=$(echo "${{ steps.get-image-name.outputs.IMAGE_NAME }}" | sed 's/:/-/')
          JFROG_IMAGE_NAME=alvarodelatorre.jfrog.io/docker/$TRANSFORMED_IMAGE_NAME:${{ github.run_number }}
          docker tag $PUBLIC_IMAGE_NAME $JFROG_IMAGE_NAME
          jf docker push $JFROG_IMAGE_NAME

      - name: Publish Build info With JFrog CLI
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: jfrog-docker-pull-push-example
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Export the build name and build number
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish

      - name: Fetch Image Digest
        id: fetch-digest
        env:
          JFROG_IMAGE_NAME: alvarodelatorre.jfrog.io/docker/jfrog-docker-python:${{ github.run_number }}
        run: |
          DIGEST=$(docker inspect --format='{{.RepoDigests}}' $JFROG_IMAGE_NAME | awk -F'@' '{print $2}' | tr -d '[]')
          echo "::set-output name=image_digest::$DIGEST"

      - name: Append Image Info to Text File
        run: |
          echo "${{ env.JFROG_IMAGE_NAME }}@${{ steps.fetch-digest.outputs.image_digest }}" >> uploaded_images.txt

      - name: Commit and Push Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add uploaded_images.txt
          git commit -m "Append new JFrog Docker image info to uploaded_images.txt"
          git push

      - name: Add comment to issue
        if: steps.trivy-scan.outcome == 'success'
        run: |
          URL="https://github.com/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
          PAYLOAD=$(echo '{ "body": "Image scan successful. You can pull the Docker image from: 'alvarodelatorre.jfrog.io/docker/jfrog-docker-python:${{ github.run_number }}'" }' | jq -c .)
          curl -sSL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" -X POST -d "$PAYLOAD" $URL }} --body "Image scan successful. You can pull the Docker image from: alvarodelatorre.jfrog.io/docker/jfrog-docker-python:${{ github.run_number }}"
